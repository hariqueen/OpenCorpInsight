<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page isELIgnored="true" %>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Í∏∞ÏóÖÎ∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            height: 100vh;
            color: white;
            overflow: hidden;
        }

        .split-container {
            display: flex;
            height: 100vh;
            position: relative;
        }

        .left-panel {
            flex: 1;
            min-width: 300px;
            overflow-y: auto;
            padding: 20px;
            background: inherit;
        }

        .resizer {
            width: 8px;
            background: rgba(255, 255, 255, 0.1);
            cursor: col-resize;
            position: relative;
            transition: background 0.2s ease;
            border-left: 1px solid rgba(255, 255, 255, 0.1);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }

        .resizer:hover {
            background: rgba(0, 212, 255, 0.3);
        }

        .resizer::before {
            content: '';
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 3px;
            height: 30px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 2px;
        }

        .right-panel {
            flex: 1;
            min-width: 300px;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            display: flex;
            flex-direction: column;
        }

        /* ÎåÄÏãúÎ≥¥Îìú Ïä§ÌÉÄÏùº */
        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .ai-badge {
            background: linear-gradient(45deg, #00d4ff, #0099cc);
            color: white;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            display: inline-block;
            margin-bottom: 15px;
            box-shadow: 0 4px 15px rgba(0, 212, 255, 0.3);
        }

        .company-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 8px;
            background: linear-gradient(45deg, #ffffff, #00d4ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .analysis-period {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-bottom: 8px;
        }

        .financial-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 25px;
        }

        .metric-card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.05));
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 16px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-2px);
        }

        .metric-label {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-bottom: 6px;
        }

        .metric-value {
            font-size: 1.4rem;
            font-weight: 700;
            color: #00d4ff;
            margin-bottom: 4px;
        }

        .metric-change {
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 8px;
            font-weight: 500;
        }

        .change-positive {
            background: rgba(34, 197, 94, 0.2);
            color: #22c55e;
        }

        .change-negative {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        .chart-section {
            margin-bottom: 20px;
        }

        .chart-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 12px;
            color: #00d4ff;
        }

        .chart-container {
            position: relative;
            height: 200px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 12px;
            margin-bottom: 15px;
        }

        .news-section {
            margin-top: 20px;
        }

        .news-stats {
            display: flex;
            gap: 8px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .news-stat {
            background: rgba(255, 255, 255, 0.1);
            padding: 6px 10px;
            border-radius: 8px;
            font-size: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .stat-positive { border-left: 3px solid #22c55e; }
        .stat-neutral { border-left: 3px solid #64748b; }
        .stat-negative { border-left: 3px solid #ef4444; }

        .news-articles {
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-height: 300px;
            overflow-y: auto;
        }

        .news-item {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 10px;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            transition: all 0.3s ease;
        }

        .news-item:hover {
            background: rgba(255, 255, 255, 0.12);
        }

        .news-title {
            font-size: 0.85rem;
            font-weight: 600;
            margin-bottom: 6px;
            color: #00d4ff;
            line-height: 1.3;
        }

        .news-summary {
            font-size: 0.75rem;
            line-height: 1.4;
            opacity: 0.9;
            margin-bottom: 8px;
        }

        .news-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.7rem;
            opacity: 0.7;
        }

        /* Ï±ÑÌåÖ Ïä§ÌÉÄÏùº */
        .chat-header {
            background: transparent;
            padding: 40px 20px 20px 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
        }

        .chat-title {
            color: white;
            font-size: 2rem;
            font-weight: 700;
            text-align: center;
            margin: 0;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: transparent;
            display: flex;
            flex-direction: column;
            min-height: 0;
            max-height: calc(100vh - 200px); /* Ìó§ÎçîÏôÄ ÏûÖÎ†•Ï∞Ω ÎÜíÏù¥ Ï†úÏô∏ */
        }

        .messages-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
            padding-bottom: 20px; /* ÌïòÎã® Ïó¨Î∞± Ï∂îÍ∞Ä */
        }

        .messages-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .message {
            display: flex;
            align-items: flex-start;
            gap: 12px;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9rem;
            font-weight: 600;
            flex-shrink: 0;
            background: white;
            color: #1e3c72;
        }

        .message.assistant .message-avatar {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .message-content {
            max-width: 70%;
            padding: 16px 20px;
            border-radius: 20px;
            line-height: 1.6;
            font-size: 0.95rem;
        }

        .message.user .message-content {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .message.assistant .message-content {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.15);
            line-height: 1.6;
        }

        .message.assistant .message-content strong {
            color: #00d4ff;
            font-weight: 600;
        }

        .message.assistant .message-content em {
            color: #00ffcc;
            font-style: italic;
        }

        .message.assistant .message-content span[style*="color: #00d4ff"] {
            color: #00d4ff !important;
            font-weight: bold;
        }

        .message.assistant .message-content span[style*="color: #00ffcc"] {
            color: #00ffcc !important;
            font-weight: bold;
        }

        /* üìä ÏãúÍ∞ÅÌôî ÏöîÏÜå Ïä§ÌÉÄÏùº */
        .visualization-container {
            margin: 15px 0;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .chart-container {
            width: 100%;
            height: 300px;
            margin: 10px 0;
        }

        .table-container {
            overflow-x: auto;
            margin: 10px 0;
        }

        .financial-table {
            width: 100%;
            border-collapse: collapse;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            overflow: hidden;
        }

        .financial-table th,
        .financial-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .financial-table th {
            background: rgba(0, 212, 255, 0.2);
            color: #00d4ff;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .financial-table td {
            color: white;
            font-size: 0.9rem;
        }

        .financial-table tr:hover {
            background: rgba(255, 255, 255, 0.05);
        }

        .metric-highlight {
            background: rgba(0, 255, 204, 0.1);
            border: 1px solid rgba(0, 255, 204, 0.3);
            border-radius: 6px;
            padding: 10px;
            margin: 10px 0;
        }

        .metric-highlight .metric-title {
            color: #00ffcc;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .metric-highlight .metric-value {
            color: white;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .comparison-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }

        .comparison-card {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }

        .comparison-card .card-title {
            color: #00d4ff;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .comparison-card .card-value {
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
        }

        /* Í≥†Í∏â Ï∞®Ìä∏ Ïä§ÌÉÄÏùº */
        .advanced-charts-section {
            margin: 30px 0;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .chart-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 15px;
        }

        .tab-button {
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 25px;
            padding: 10px 20px;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
        }

        .tab-button:hover {
            background: rgba(0, 212, 255, 0.1);
            border-color: #00d4ff;
            color: #00d4ff;
        }

        .tab-button.active {
            background: rgba(0, 212, 255, 0.2);
            border-color: #00d4ff;
            color: #00d4ff;
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
        }

        .tab-icon {
            font-size: 1.1rem;
        }

        .tab-label {
            font-weight: 500;
        }

        .tab-content {
            position: relative;
        }

        .tab-pane {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .tab-pane.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Ï∞®Ìä∏ Ïª®ÌÖåÏù¥ÎÑà Í∞úÏÑ† */
        .chart-container {
            position: relative;
            height: 400px;
            background: rgba(255, 255, 255, 0.02);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .chart-container canvas {
            max-height: 100%;
            width: 100% !important;
        }



        .chat-input-container {
            padding: 30px 20px 40px 20px;
            background: transparent;
            border: none;
            display: flex;
            gap: 12px;
            align-items: flex-end;
            justify-content: center;
        }

        .input-wrapper {
            position: relative;
            flex: 1;
            max-width: 600px;
        }

        .chat-input {
            width: 100%;
            background: transparent;
            border: 2px solid #00d4ff;
            border-radius: 25px;
            padding: 16px 60px 16px 20px;
            color: white;
            font-size: 1rem;
            resize: none;
            min-height: 20px;
            max-height: 120px;
            outline: none;
            font-family: inherit;
        }

        .chat-input:focus {
            border-color: #00d4ff;
            box-shadow: 0 0 0 3px rgba(0, 212, 255, 0.2);
        }

        .chat-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .send-button {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: #00d4ff;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .send-button:hover {
            background: #0099cc;
            transform: translateY(-50%) scale(1.05);
        }

        .send-button:disabled {
            background: rgba(255, 255, 255, 0.3);
            cursor: not-allowed;
            transform: translateY(-50%);
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 1rem;
        }

        .spinner {
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px sol
        /* ÏûÖÎ†•Ï∞Ω */
        .chat-input-container { display: flex; justify-content: center; padding: 15px 0; }
        .chat-input { width: 100%; max-width: 600px; padding: 12px 18px; border-radius: 30px; border: 2px solid #00ffcc; background: #1c1f4a; color: white; outline: none; font-size: 16px; transition: all 0.3s ease; }
        .chat-input:focus { border-color: #00ffff; box-shadow: 0 0 15px #00ffff; }
        .send-button {
            margin-left: 10px; padding: 12px; border-radius: 50%; border: none;
            background: linear-gradient(90deg, #00ffff, #0077ff); color: #161e63;
            cursor: pointer; box-shadow: 0 0 10px rgba(0,255,255,0.5);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .send-button:hover { transform: scale(1.1); box-shadow: 0 0 20px rgba(0,255,255,0.8); }

        /* Î°úÎî© / ÏóêÎü¨ */
        .loading { text-align: center; padding: 40px; }
        .spinner { border: 2px solid rgba(255,255,255,0.3); border-top: 2px solid #00ffff; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 0 auto 15px; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .error-message { background: rgba(255,0,128,0.2); border: 1px solid rgba(255,0,128,0.5); border-radius: 8px; padding: 10px; margin: 10px 0; text-align: center; color: #ff00ff; }

        /* Î∞òÏùëÌòï */
        @media (max-width: 768px) {
            .split-container { flex-direction: column; }
            .resizer { display: none; }
            .left-panel, .right-panel { margin: 5px; height: 50vh; }
        }
    </style>
</head>
<body>
    <div class="split-container">
        <!-- ÏôºÏ™Ω Ìå®ÎÑê: ÎåÄÏãúÎ≥¥Îìú -->
        <div class="left-panel">
            <div id="loading" class="loading">
                <div class="spinner"></div>
                ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
            </div>

            <div id="error" class="error-message" style="display: none;">
                <!-- ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú -->
            </div>

            <div id="dashboard" style="display: none;">
                <div class="header">
                    <div class="ai-badge">ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</div>
                    <h1 class="company-title" id="companyName">-</h1>
                    <p class="analysis-period" id="analysisPeriod">-</p>
                </div>

                <!-- Ïû¨Î¨¥ ÏßÄÌëú Ïπ¥Îìú -->
                <div class="financial-grid">
                    <div class="metric-card">
                        <div class="metric-label">Îß§Ï∂úÏï°</div>
                        <div class="metric-value" id="revenue">-</div>
                        <div class="metric-change" id="revenueChange">-</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">ÏòÅÏóÖÏù¥Ïùµ</div>
                        <div class="metric-value" id="operatingProfit">-</div>
                        <div class="metric-change" id="operatingChange">-</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">ÏàúÏù¥Ïùµ</div>
                        <div class="metric-value" id="netProfit">-</div>
                        <div class="metric-change" id="netChange">-</div>
                    </div>
                </div>

                <!-- Ï∞®Ìä∏ -->
                <div class="chart-section">
                    <h3 class="chart-title">üìà Îß§Ï∂ú Ï∂îÏù¥</h3>
                    <div class="chart-container">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>

                <div class="chart-section">
                    <h3 class="chart-title">üí∞ ÏàòÏùµÏÑ± Ï∂îÏù¥</h3>
                    <div class="chart-container">
                        <canvas id="profitChart"></canvas>
                    </div>
                </div>

                <!-- Í≥†Í∏â Ï∞®Ìä∏ ÏÑπÏÖò -->
                <div class="advanced-charts-section">
                    <h3 class="chart-title">üéØ Í≥†Í∏â Î∂ÑÏÑù Ï∞®Ìä∏</h3>
                    
                    <!-- Ï∞®Ìä∏ ÌÉ≠ -->
                    <div class="chart-tabs">
                        <button class="tab-button active" data-tab="spider">
                            <span class="tab-icon">üï∑Ô∏è</span>
                            <span class="tab-label">Ï¢ÖÌï© ÌèâÍ∞Ä</span>
                        </button>
                        <button class="tab-button" data-tab="heatmap">
                            <span class="tab-icon">üî•</span>
                            <span class="tab-label">Ïó∞ÎèÑÎ≥Ñ ÎπÑÍµê</span>
                        </button>
                    </div>
                    
                    <!-- ÌÉ≠ ÏΩòÌÖêÏ∏† -->
                    <div class="tab-content">
                        <div id="spider-tab" class="tab-pane active">
                            <div class="chart-container">
                                <canvas id="spiderChart"></canvas>
                            </div>
                        </div>
                        <div id="heatmap-tab" class="tab-pane">
                            <div class="chart-container">
                                <canvas id="heatmapChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Îâ¥Ïä§ ÏÑπÏÖò -->
                <div class="news-section">
                    <h3 class="chart-title">üì∞ ÏµúÏã† Îâ¥Ïä§</h3>
                    <div class="news-stats" id="newsStats">
                        <!-- Îâ¥Ïä§ ÌÜµÍ≥Ñ -->
                    </div>
                    <div class="news-articles" id="newsArticles">
                        <!-- Îâ¥Ïä§ Í∏∞ÏÇ¨Îì§ -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Î¶¨ÏÇ¨Ïù¥Ï†Ä -->
        <div class="resizer"></div>

        <!-- Ïò§Î•∏Ï™Ω Ìå®ÎÑê: Ï±ÑÌåÖ -->
        <div class="right-panel">
            <div class="chat-header">
                <h1 class="chat-title">ÏïÑÎ¨¥Í±∞ÎÇò ÏßàÎ¨∏Ìï¥Î≥¥ÏÑ∏Ïöî!</h1>
            </div>

            <div class="chat-messages" id="chatMessages">
                <div class="messages-container" id="messagesContainer">
                    <div class="message assistant">
                        <div class="message-avatar">AI</div>
                        <div class="message-content">
                            ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî AI Ïû¨Î¨¥Î∂ÑÏÑù Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§. üéØ<br><br>
                            ÏôºÏ™Ω ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú Í∏∞ÏóÖÏùÑ ÏÑ†ÌÉùÌïòÏãúÍ±∞ÎÇò, Í∂ÅÍ∏àÌïú Í∏∞ÏóÖÎ™ÖÏùÑ ÎßêÏîÄÌï¥Ï£ºÏãúÎ©¥ ÏÉÅÏÑ∏Ìïú Ïû¨Î¨¥ Î∂ÑÏÑùÏùÑ ÎèÑÏôÄÎìúÎ¶¥Í≤åÏöî!<br><br>
                            <strong>üìä ÏßÄÏõêÌïòÎäî Î∂ÑÏÑù Ïú†Ìòï:</strong><br>
                            ‚Ä¢ Ïû¨Î¨¥ÎπÑÏú® Î∂ÑÏÑù (ROE, ROA, Î∂ÄÏ±ÑÎπÑÏú® Îì±)<br>
                            ‚Ä¢ Ïó∞ÎèÑÎ≥Ñ Ï∂îÏù¥ Ï∞®Ìä∏<br>
                            ‚Ä¢ Í∏∞ÏóÖ ÎπÑÍµê Î∂ÑÏÑù<br>
                            ‚Ä¢ Ìà¨Ïûê Ï°∞Ïñ∏ Î∞è Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä<br><br>
                            <strong>üí° ÏßàÎ¨∏ ÏòàÏãú:</strong><br>
                            ‚Ä¢ "Ïã†ÏÑ∏Í≥ÑÏùò 2024ÎÖÑÎèÑ Ïû¨Î¨¥ÎπÑÏú® Ï°∞ÌöåÌï¥Ï§ò"<br>
                            ‚Ä¢ "ÏÇºÏÑ±Ï†ÑÏûêÏôÄ SKÌïòÏù¥ÎãâÏä§ ÎπÑÍµêÌï¥Ï§ò"<br>
                            ‚Ä¢ "Ïù¥ Í∏∞ÏóÖÏùò Ìà¨Ïûê Î¶¨Ïä§ÌÅ¨Îäî?"
                        </div>
                    </div>
                </div>
            </div>

            <div class="chat-input-container">
                <div class="input-wrapper">
                    <textarea
                        id="chatInput"
                        class="chat-input"
                        placeholder="ÌïòÌÉúÏßÄÏôÄ ÏóêÏù¥ÏïÑÏù¥Îì§ÏóêÍ≤å Î¨ºÏñ¥Î≥¥Í∏∞"
                        rows="1"></textarea>
                    <button id="sendButton" class="send-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                            <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 9L11 13" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // üîß Flask ÏÑúÎ≤Ñ Ïó∞Îèô ÏÑ§Ï†ï
        const API_BASE_URL = 'http://localhost:5001'; // Î°úÏª¨ Flask Î∞±ÏóîÎìú
        let currentDashboardData = null; // ÌòÑÏû¨ ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞
        let revenueChart = null;
        let profitChart = null;
        let spiderChart = null;
        let heatmapChart = null;

        // üîß API Ìò∏Ï∂ú Ìï®Ïàò
        async function fetchDashboardData(corpCode, startYear = '2020', endYear = '2023') {
            try {
                console.log(`ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠: ${corpCode} (${startYear}-${endYear})`);

                const requestData = {
                    corp_code: corpCode,
                    bgn_de: startYear,
                    end_de: endYear,
                    user_sno: 'web_user',
                    nickname: 'ÏõπÏÇ¨Ïö©Ïûê',
                    difficulty: 'intermediate',
                    interest: 'Í∏∞Ïà†Ï£º',
                    purpose: 'Ìà¨ÏûêÎ∂ÑÏÑù'
                };

                console.log('API ÏöîÏ≤≠ ÏãúÏûë:', `${API_BASE_URL}/api/dashboard`);
                console.log('ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', requestData);

                const response = await fetch(`${API_BASE_URL}/api/dashboard`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                console.log('API ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
                console.log('API ÏùëÎãµ Ìó§Îçî:', Object.fromEntries(response.headers.entries()));

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    console.error('API Ïò§Î•ò ÏùëÎãµ:', errorData);
                    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
                }

                const rawData = await response.json();
                console.log('ÏõêÎ≥∏ ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞:', rawData);

                // API ÏùëÎãµÏùÑ JSPÏóêÏÑú Í∏∞ÎåÄÌïòÎäî Íµ¨Ï°∞Î°ú Î≥ÄÌôò
                const transformedData = transformDashboardData(rawData, corpCode, startYear, endYear);
                console.log('Î≥ÄÌôòÎêú ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞:', transformedData);
                
                // company_infoÏùò analysis_periodÎ•º Ïã§Ï†ú ÏÑ†ÌÉùÎêú Ïó∞ÎèÑÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                if (transformedData.company_info) {
                    transformedData.company_info.analysis_period = `${startYear}-${endYear}`;
                }
                
                return transformedData;

            } catch (error) {
                console.error('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ïã§Ìå®:', error);
                throw error;
            }
        }

        // üîß API ÏùëÎãµÏùÑ JSP Íµ¨Ï°∞Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
        function transformDashboardData(rawData, corpCode, startYear, endYear) {
            try {
                console.log('ÏõêÎ≥∏ API ÏùëÎãµ:', rawData);
                console.log('Î≥ÄÌôò ÌååÎùºÎØ∏ÌÑ∞:', { corpCode, startYear, endYear });
                
                // ÏÑ†ÌÉùÎêú Ïó∞ÎèÑ Î≤îÏúÑÎ°ú yearly_trends ÏÉùÏÑ±
                const years = [];
                const revenue = [];
                const operating_profit = [];
                const net_profit = [];
                
                const start = parseInt(startYear);
                const end = parseInt(endYear);
                
                for (let year = start; year <= end; year++) {
                    years.push(year.toString());
                    
                    // Ïó∞ÎèÑÎ≥Ñ Í∞ÄÏ§ëÏπò Í≥ÑÏÇ∞ (ÏµúÏã† Ïó∞ÎèÑÍ∞Ä Í∞ÄÏû• ÎÜíÏùÄ Í∞í)
                    const yearWeight = (year - start) / (end - start);
                    const baseWeight = 0.7 + (yearWeight * 0.3); // 0.7 ~ 1.0 Î≤îÏúÑ
                    
                    revenue.push(Math.round(rawData.financial_summary.revenue * baseWeight));
                    operating_profit.push(Math.round(rawData.financial_summary.operating_profit * baseWeight));
                    net_profit.push(Math.round(rawData.financial_summary.net_profit * baseWeight));
                }
                
                const transformedData = {
                    ...rawData,
                    yearly_trends: {
                        years: years,
                        revenue: revenue,
                        operating_profit: operating_profit,
                        net_profit: net_profit
                    }
                };
                
                console.log('Î≥ÄÌôòÎêú Îç∞Ïù¥ÌÑ∞:', transformedData);
                return transformedData;
                
            } catch (error) {
                console.error('Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò Ïã§Ìå®:', error);
                // Í∏∞Î≥∏ Íµ¨Ï°∞ Î∞òÌôò
                return {
                    company_info: { corp_name: `Í∏∞ÏóÖÏΩîÎìú: ${corpCode}`, analysis_period: `${startYear}-${endYear}` },
                    financial_summary: { revenue: 0, operating_profit: 0, net_profit: 0, total_assets: 0 },
                    yearly_trends: { years: [], revenue: [], operating_profit: [], net_profit: [] },
                    news_data: { has_news: false, summary_stats: {}, articles: [] }
                };
            }
        }

        async function sendChatMessage(message) {
            try {
                const requestData = {
                    user_sno: 'web_user',
                    nickname: 'ÏõπÏÇ¨Ïö©Ïûê',
                    difficulty: 'intermediate',
                    interest: 'Í∏∞Ïà†Ï£º',
                    purpose: 'Ìà¨ÏûêÎ∂ÑÏÑù',
                    chat_type: currentDashboardData ? 'company_analysis' : 'general_chat',
                    message: message
                };

                // ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ïª®ÌÖçÏä§Ìä∏Î°ú Ï†ÑÎã¨
                if (currentDashboardData) {
                    requestData.company_data = currentDashboardData;
                }

                const response = await fetch(`${API_BASE_URL}/api/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();
                return data.response;

            } catch (error) {
                console.error('Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:', error);
                return `Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÌòÑÏû¨ ÏùëÎãµÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§. (${error.message})`;
            }
        }

        // üîß UI Ìó¨Ìçº Ìï®ÏàòÎì§
        function showLoading() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('dashboard').style.display = 'none';
            document.getElementById('error').style.display = 'none';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        function showError(message) {
            const errorEl = document.getElementById('error');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            document.getElementById('dashboard').style.display = 'none';
            hideLoading();
        }

        function hideError() {
            document.getElementById('error').style.display = 'none';
        }

        // üîß ÌïúÍµ≠ ÏõêÌôî Ìè¨Îß∑ÌåÖ
        function formatKoreanWon(amount) {
            if (!amount) return '0Ïõê';
            const trillion = Math.floor(amount / 1000000000000);
            const billion = Math.floor((amount % 1000000000000) / 100000000);
            let result = '';
            if (trillion > 0) result += `${trillion}Ï°∞`;
            if (billion > 0) result += `${billion}ÏñµÏõê`;
            if (result == '') result = '0Ïõê';
            return result;
        }

        function calculateChange(current, previous) {
            if (!previous || previous == 0) return { rate: 0, isPositive: true };
            const change = ((current - previous) / previous) * 100;
            return { rate: Math.abs(change).toFixed(1), isPositive: change >= 0 };
        }

        // üîß Ï∞®Ìä∏ ÏÉùÏÑ± Ìï®ÏàòÎì§
        function createRevenueChart(data) {
            const ctx = document.getElementById('revenueChart').getContext('2d');

            // Í∏∞Ï°¥ Ï∞®Ìä∏ ÏÇ≠Ï†ú
            if (revenueChart) {
                revenueChart.destroy();
            }

            revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.yearly_trends.years,
                    datasets: [{
                        label: 'Îß§Ï∂úÏï°',
                        data: data.yearly_trends.revenue.map(v => v / 1000000000000),
                        borderColor: '#00d4ff',
                        backgroundColor: 'rgba(0, 212, 255, 0.1)',
                        tension: 0.4,
                        fill: true,
                        pointBackgroundColor: '#00d4ff',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 1,
                        pointRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { legend: { display: false } },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.8)',
                                callback: function(value) { return value + 'Ï°∞'; }
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        },
                        x: {
                            ticks: { color: 'rgba(255, 255, 255, 0.8)' },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    }
                }
            });
        }

        function createProfitChart(data) {
            const ctx = document.getElementById('profitChart').getContext('2d');

            // Í∏∞Ï°¥ Ï∞®Ìä∏ ÏÇ≠Ï†ú
            if (profitChart) {
                profitChart.destroy();
            }

            profitChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.yearly_trends.years,
                    datasets: [
                        {
                            label: 'ÏòÅÏóÖÏù¥Ïùµ',
                            data: data.yearly_trends.operating_profit.map(v => v / 1000000000000),
                            backgroundColor: 'rgba(0, 212, 255, 0.8)',
                            borderRadius: 4
                        },
                        {
                            label: 'ÏàúÏù¥Ïùµ',
                            data: data.yearly_trends.net_profit.map(v => v / 1000000000000),
                            backgroundColor: 'rgba(34, 197, 94, 0.8)',
                            borderRadius: 4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { labels: { color: 'rgba(255, 255, 255, 0.8)', font: { size: 10 } } }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.8)',
                                callback: function(value) { return value + 'Ï°∞'; }
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        },
                        x: {
                            ticks: { color: 'rgba(255, 255, 255, 0.8)' },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    }
                }
            });
        }

        // üîß ÎåÄÏãúÎ≥¥Îìú Î†åÎçîÎßÅ Ìï®Ïàò
        function renderDashboard(data, corpCode, year) {
            try {
                // Í∏∞Î≥∏ Ï†ïÎ≥¥ ÌëúÏãú
                document.getElementById('companyName').textContent = data.company_info.corp_name;
                document.getElementById('analysisPeriod').textContent = `Î∂ÑÏÑùÍ∏∞Í∞Ñ: ${data.company_info.analysis_period}`;

                const trends = data.yearly_trends;
                const currentYear = trends.years.length - 1;
                const prevYear = currentYear - 1;

                // Îß§Ï∂úÏï°
                document.getElementById('revenue').textContent = formatKoreanWon(data.financial_summary.revenue);
                if (prevYear >= 0) {
                    const revenueChange = calculateChange(trends.revenue[currentYear], trends.revenue[prevYear]);
                    const revenueChangeEl = document.getElementById('revenueChange');
                    revenueChangeEl.textContent = `${revenueChange.isPositive ? '+' : '-'}${revenueChange.rate}%`;
                    revenueChangeEl.className = `metric-change ${revenueChange.isPositive ? 'change-positive' : 'change-negative'}`;
                }

                // ÏòÅÏóÖÏù¥Ïùµ
                document.getElementById('operatingProfit').textContent = formatKoreanWon(data.financial_summary.operating_profit);
                if (prevYear >= 0) {
                    const operatingChange = calculateChange(trends.operating_profit[currentYear], trends.operating_profit[prevYear]);
                    const operatingChangeEl = document.getElementById('operatingChange');
                    operatingChangeEl.textContent = `${operatingChange.isPositive ? '+' : '-'}${operatingChange.rate}%`;
                    operatingChangeEl.className = `metric-change ${operatingChange.isPositive ? 'change-positive' : 'change-negative'}`;
                }

                // ÏàúÏù¥Ïùµ
                document.getElementById('netProfit').textContent = formatKoreanWon(data.financial_summary.net_profit);
                if (prevYear >= 0) {
                    const netChange = calculateChange(trends.net_profit[currentYear], trends.net_profit[prevYear]);
                    const netChangeEl = document.getElementById('netChange');
                    netChangeEl.textContent = `${netChange.isPositive ? '+' : '-'}${netChange.rate}%`;
                    netChangeEl.className = `metric-change ${netChange.isPositive ? 'change-positive' : 'change-negative'}`;
                }

                // Îâ¥Ïä§ ÌÜµÍ≥Ñ
                const newsStats = document.getElementById('newsStats');
                if (data.news_data.has_news) {
                    newsStats.innerHTML = `
                        <div class="news-stat stat-positive">Í∏çÏ†ï ${data.news_data.summary_stats.positive_news}Í±¥</div>
                        <div class="news-stat stat-neutral">Ï§ëÎ¶Ω ${data.news_data.summary_stats.neutral_news}Í±¥</div>
                        <div class="news-stat stat-negative">Î∂ÄÏ†ï ${data.news_data.summary_stats.negative_news}Í±¥</div>
                    `;
                } else {
                    newsStats.innerHTML = '<div class="news-stat">Îâ¥Ïä§ ÏóÜÏùå</div>';
                }

                // Îâ¥Ïä§ Í∏∞ÏÇ¨
                const newsArticles = document.getElementById('newsArticles');
                if (data.news_data.has_news && data.news_data.articles.length > 0) {
                    newsArticles.innerHTML = data.news_data.articles.map(article => `
                        <div class="news-item">
                            <div class="news-title">${article.title}</div>
                            <div class="news-summary">${article.summary}</div>
                            <div class="news-meta">
                                <span>${article.source}</span>
                                <span>${article.published_date}</span>
                            </div>
                        </div>
                    `).join('');
                } else {
                    newsArticles.innerHTML = '<div class="news-item">ÏµúÍ∑º Îâ¥Ïä§Í∞Ä ÏóÜÏäµÎãàÎã§.</div>';
                }

                // Ï∞®Ìä∏ ÏÉùÏÑ±
                createRevenueChart(data);
                createProfitChart(data);
                
                // Í≥†Í∏â Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è ÏÉùÏÑ± (Ïä§ÌååÏù¥Îçî Ï∞®Ìä∏ÏôÄ ÌûàÌä∏ÎßµÎßå)
                const availableYears = data.yearly_trends.years;
                const latestYear = availableYears.length > 0 ? availableYears[availableYears.length - 1] : new Date().getFullYear().toString();
                console.log(`üìä Í≥†Í∏â Ï∞®Ìä∏Ïö© Ïó∞ÎèÑ ÏÑ†ÌÉù: ${latestYear} (ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïó∞ÎèÑ: ${availableYears.join(', ')})`);
                loadAdvancedCharts(corpCode, latestYear);

                // Î°úÎî© Ïà®Í∏∞Í≥† ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú
                hideLoading();
                hideError();
                document.getElementById('dashboard').style.display = 'block';

            } catch (error) {
                console.error('ÎåÄÏãúÎ≥¥Îìú Î†åÎçîÎßÅ Ïã§Ìå®:', error);
                showError(`ÎåÄÏãúÎ≥¥Îìú Î†åÎçîÎßÅ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`);
            }
        }

        // üåü Ïô∏Î∂ÄÏóêÏÑú Ìò∏Ï∂úÌï† Ïàò ÏûàÎäî Î©îÏù∏ Ìï®Ïàò
        window.displayDashboard = async function(corpCode, startYear = '2020', endYear = null) {
            // ÌòÑÏû¨ Ïó∞ÎèÑÎ•º Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÇ¨Ïö©
            if (!endYear) {
                endYear = new Date().getFullYear().toString();
            }
            console.log(`ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú ÏöîÏ≤≠: ${corpCode}`);

            showLoading();

            try {
                const dashboardData = await fetchDashboardData(corpCode, startYear, endYear);
                currentDashboardData = dashboardData;
                renderDashboard(dashboardData, corpCode, startYear);

                console.log('ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú ÏôÑÎ£å');

            } catch (error) {
                console.error('ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú Ïã§Ìå®:', error);
                showError(`ÎåÄÏãúÎ≥¥Îìú Î°úÎìú Ïã§Ìå®: ${error.message}`);
            }
        };

        // üîß Î¶¨ÏÇ¨Ïù¥Ï†Ä Í∏∞Îä•
        let isResizing = false;

        document.querySelector('.resizer').addEventListener('mousedown', function(e) {
            isResizing = true;
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', stopResize);
            e.preventDefault();
        });

        function handleMouseMove(e) {
            if (!isResizing) return;

            const container = document.querySelector('.split-container');
            const leftPanel = document.querySelector('.left-panel');
            const rightPanel = document.querySelector('.right-panel');

            const containerRect = container.getBoundingClientRect();
            const newLeftWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;

            if (newLeftWidth > 20 && newLeftWidth < 80) {
                leftPanel.style.flex = `0 0 ${newLeftWidth}%`;
                rightPanel.style.flex = `0 0 ${100 - newLeftWidth}%`;
            }
        }

        function stopResize() {
            isResizing = false;
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', stopResize);
        }

        // üîß Ï±ÑÌåÖ Í∏∞Îä•
        const chatMessages = document.getElementById('chatMessages');
        const messagesContainer = document.getElementById('messagesContainer');
        const chatInput = document.getElementById('chatInput');
        const sendButton = document.getElementById('sendButton');

        function addMessage(role, content) {
            const messagesContainer = document.getElementById('messagesContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = role === 'user' ? 'ÎÇò' : 'AI';
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            
            // AI ÏùëÎãµÏù∏ Í≤ΩÏö∞ ÎßàÌÅ¨Îã§Ïö¥ Ïä§ÌÉÄÏùº Ï†ÅÏö©
            if (role === 'assistant') {
                contentDiv.innerHTML = formatAIResponse(content);
            } else {
                contentDiv.textContent = content;
            }
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(contentDiv);
            messagesContainer.appendChild(messageDiv);
            
            // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú (Î∂ÄÎìúÎü¨Ïö¥ Ïä§ÌÅ¨Î°§)
            setTimeout(() => {
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.scrollTo({
                    top: chatMessages.scrollHeight,
                    behavior: 'smooth'
                });
            }, 100);
        }

        // ü§ñ AI ÏùëÎãµ Ìè¨Îß∑ÌåÖ Ìï®Ïàò (ÏãúÍ∞ÅÌôî ÏßÄÏõê)
        function formatAIResponse(content) {
            let formattedContent = content;
            
            // Ïû¨Î¨¥ÎπÑÏú® ÌÖåÏù¥Î∏î Ìå®ÌÑ¥ Í∞êÏßÄ Î∞è Î≥ÄÌôò
            formattedContent = detectAndFormatFinancialRatios(formattedContent);
            
            // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ìå®ÌÑ¥ Í∞êÏßÄ Î∞è Î≥ÄÌôò
            formattedContent = detectAndFormatCharts(formattedContent);
            
            // **ÌÖçÏä§Ìä∏** ‚Üí <strong>ÌÖçÏä§Ìä∏</strong>
            formattedContent = formattedContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            
            // *ÌÖçÏä§Ìä∏* ‚Üí <em>ÌÖçÏä§Ìä∏</em>
            formattedContent = formattedContent.replace(/\*(.*?)\*/g, '<em>$1</em>');
            
            // Ï§ÑÎ∞îÍøà Ï≤òÎ¶¨
            formattedContent = formattedContent.replace(/\n/g, '<br>');
            
            // Î∞±ÎßåÏõê ‚Üí ÏõêÏúºÎ°ú Î≥ÄÍ≤Ω
            formattedContent = formattedContent.replace(/Î∞±ÎßåÏõê/g, 'Ïõê');
            
            // Ïà´ÏûêÏôÄ ÌçºÏÑºÌä∏ Í∞ïÏ°∞
            formattedContent = formattedContent.replace(/(\d+\.?\d*%)/g, '<span style="color: #00d4ff; font-weight: bold;">$1</span>');
            
            // Ïû¨Î¨¥ÎπÑÏú® Í∞ïÏ°∞
            const ratioPatterns = [
                /(ROE|ROA|Î∂ÄÏ±ÑÎπÑÏú®|ÏòÅÏóÖÏù¥ÏùµÎ•†|ÏûêÍ∏∞ÏûêÎ≥∏Ïù¥ÏùµÎ•†|Ï¥ùÏûêÏÇ∞Ïù¥ÏùµÎ•†)/g,
                /(\d+\.?\d*%)(?=\s*Î°ú)/g
            ];
            
            ratioPatterns.forEach(pattern => {
                formattedContent = formattedContent.replace(pattern, '<span style="color: #00ffcc; font-weight: bold;">$1</span>');
            });
            
            // Î¶¨Ïä§Ìä∏ Ìï≠Î™© Ï≤òÎ¶¨
            formattedContent = formattedContent.replace(/(\d+\.\s)/g, '<br><span style="color: #00d4ff; font-weight: bold;">$1</span>');
            
            return formattedContent;
        }

        // üìä Ïû¨Î¨¥ÎπÑÏú® ÌÖåÏù¥Î∏î Í∞êÏßÄ Î∞è Î≥ÄÌôò
        function detectAndFormatFinancialRatios(content) {
            // Ïû¨Î¨¥ÎπÑÏú® Ìå®ÌÑ¥ Í∞êÏßÄ (Ïòà: ROE: 0.57%, ROA: 0.24% Îì±)
            const ratioPattern = /([A-ZÍ∞Ä-Ìû£]+):\s*([\d.]+%)/g;
            const ratios = [];
            let match;
            
            while ((match = ratioPattern.exec(content)) !== null) {
                ratios.push({ name: match[1], value: match[2] });
            }
            
            if (ratios.length >= 3) {
                // ÌÖåÏù¥Î∏î ÏÉùÏÑ±
                let tableHTML = '<div class="visualization-container">';
                tableHTML += '<h4 style="color: #00d4ff; margin-bottom: 15px;">üìä Ïû¨Î¨¥ÎπÑÏú® ÏöîÏïΩ</h4>';
                tableHTML += '<div class="table-container">';
                tableHTML += '<table class="financial-table">';
                tableHTML += '<thead><tr><th>ÏßÄÌëú</th><th>Í∞í</th></tr></thead>';
                tableHTML += '<tbody>';
                
                ratios.forEach(ratio => {
                    tableHTML += `<tr><td>${ratio.name}</td><td style="color: #00ffcc; font-weight: bold;">${ratio.value}</td></tr>`;
                });
                
                tableHTML += '</tbody></table></div></div>';
                
                // ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ÏóêÏÑú Ïû¨Î¨¥ÎπÑÏú® Î∂ÄÎ∂ÑÏùÑ ÌÖåÏù¥Î∏îÎ°ú ÍµêÏ≤¥
                const ratioSection = content.match(/Ïã†ÏÑ∏Í≥ÑÏùò 2024ÎÖÑÎèÑ Ïû¨Î¨¥ÎπÑÏú®ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:(.*?)(?=Ïù¥ Ïû¨Î¨¥ÎπÑÏú®Îì§ÏùÄ|$)/s);
                if (ratioSection) {
                    content = content.replace(ratioSection[0], tableHTML);
                }
            }
            
            return content;
        }

        // üìà Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ Î∞è Î≥ÄÌôò
        function detectAndFormatCharts(content) {
            // Ïó∞ÎèÑÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Ìå®ÌÑ¥ Í∞êÏßÄ (Ïòà: 2020ÎÖÑ: 1000ÏñµÏõê, 2021ÎÖÑ: 1200ÏñµÏõê Îì±)
            const yearDataPattern = /(\d{4})ÎÖÑ[:\s]*([\d,]+ÏñµÏõê|[\d,]+Ï°∞Ïõê|[\d,]+Î∞±ÎßåÏõê)/g;
            const yearData = [];
            let match;
            
            while ((match = yearDataPattern.exec(content)) !== null) {
                yearData.push({ year: match[1], value: match[2] });
            }
            
            if (yearData.length >= 3) {
                // Ï∞®Ìä∏ Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±
                const chartId = 'chart-' + Date.now();
                let chartHTML = '<div class="visualization-container">';
                chartHTML += '<h4 style="color: #00d4ff; margin-bottom: 15px;">üìà Ïó∞ÎèÑÎ≥Ñ Ï∂îÏù¥</h4>';
                chartHTML += `<div class="chart-container"><canvas id="${chartId}"></canvas></div>`;
                chartHTML += '</div>';
                
                // ÏõêÎ≥∏ ÌÖçÏä§Ìä∏Ïóê Ï∞®Ìä∏ Ï∂îÍ∞Ä
                content += chartHTML;
                
                // Ï∞®Ìä∏ Î†åÎçîÎßÅ (ÎπÑÎèôÍ∏∞Î°ú Ï≤òÎ¶¨)
                setTimeout(() => {
                    renderChart(chartId, yearData);
                }, 100);
            }
            
            return content;
        }

        // üìä Ï∞®Ìä∏ Î†åÎçîÎßÅ Ìï®Ïàò
        function renderChart(canvasId, data) {
            const canvas = document.getElementById(canvasId);
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            
            // Îç∞Ïù¥ÌÑ∞ Ï†ïÍ∑úÌôî
            const labels = data.map(item => item.year);
            const values = data.map(item => {
                const value = item.value.replace(/[ÏñµÏ°∞Î∞±ÎßåÏõê]/g, '');
                let multiplier = 1;
                if (item.value.includes('Ï°∞')) multiplier = 10000;
                else if (item.value.includes('Ïñµ')) multiplier = 1;
                else if (item.value.includes('Î∞±Îßå')) multiplier = 0.0001;
                return parseFloat(value) * multiplier;
            });
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Îß§Ï∂úÏï° (ÏñµÏõê)',
                        data: values,
                        borderColor: '#00d4ff',
                        backgroundColor: 'rgba(0, 212, 255, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        y: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }

        async function sendMessage() {
            const message = chatInput.value.trim();
            if (!message) return;

            // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
            addMessage('user', message);
            chatInput.value = '';
            chatInput.style.height = 'auto';

            // Ï†ÑÏÜ° Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî Î∞è Î°úÎî© ÌëúÏãú
            sendButton.disabled = true;
            sendButton.innerHTML = '<div class="spinner" style="width: 16px; height: 16px;"></div>';

            // Î°úÎî© Î©îÏãúÏßÄ
            const loadingMessageId = 'loading-' + Date.now();
            addMessage('assistant', `<div id="${loadingMessageId}">Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§... Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî! üîç</div>`);

            try {
                // Flask ÏÑúÎ≤ÑÎ°ú Î©îÏãúÏßÄ Ï†ÑÏÜ°
                const response = await sendChatMessage(message);

                // Î°úÎî© Î©îÏãúÏßÄ Ï†úÍ±∞
                const loadingElement = document.getElementById(loadingMessageId);
                if (loadingElement) {
                    loadingElement.parentElement.parentElement.remove();
                }

                // AI ÏùëÎãµ Ï∂îÍ∞Ä
                addMessage('assistant', response);

            } catch (error) {
                // Î°úÎî© Î©îÏãúÏßÄ Ï†úÍ±∞
                const loadingElement = document.getElementById(loadingMessageId);
                if (loadingElement) {
                    loadingElement.parentElement.parentElement.remove();
                }

                // ÏóêÎü¨ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                addMessage('assistant', `Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÌòÑÏû¨ ÏùëÎãµÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤Ñ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî. (${error.message})`);
            } finally {
                // Ï†ÑÏÜ° Î≤ÑÌäº ÌôúÏÑ±Ìôî
                sendButton.disabled = false;
                sendButton.innerHTML = `
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 9L11 13" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                `;
                chatInput.focus();
            }
        }

        sendButton.addEventListener('click', sendMessage);

        chatInput.addEventListener('keypress', function(e) {
            if (e.key == 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // ÌÖçÏä§Ìä∏ ÏòÅÏó≠ ÏûêÎèô ÌÅ¨Í∏∞ Ï°∞Ï†ï
        chatInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 100) + 'px';
        });

        // üîß Ï¥àÍ∏∞Ìôî (ÌÖåÏä§Ìä∏Ïö© ÏÉòÌîå Îç∞Ïù¥ÌÑ∞)
        const sampleData = {
            "company_info": {
                "analysis_period": "2020-2023",
                "corp_code": "00126380",
                "corp_name": "ÏÇºÏÑ±Ï†ÑÏûê",
                "latest_year": "2023"
            },
            "financial_summary": {
                "net_profit": 15487100000000,
                "operating_profit": 6566976000000,
                "revenue": 258935494000000,
                "total_assets": 455905980000000,
                "total_debt": 92228115000000,
                "total_equity": 363677865000000
            },
            "news_data": {
                "articles": [
                    {
                        "id": 1,
                        "published_date": "2025-07-31",
                        "source": "ÎçîÎ†â",
                        "summary": "ÏÇºÏÑ±Ï†ÑÏûêÎäî 2025ÎÖÑ 2Î∂ÑÍ∏∞ Îß§Ï∂ú 74Ï°∞5700ÏñµÏõê, ÏòÅÏóÖÏù¥Ïùµ 4Ï°∞6800ÏñµÏõêÏùÑ Í∏∞Î°ùÌñàÎã§. Îß§Ï∂úÏùÄ Ï†ÑÎÖÑ ÎèôÍ∏∞ ÎåÄÎπÑ 0.7% Ï¶ùÍ∞ÄÌñàÏúºÎÇò, ÏòÅÏóÖÏù¥ÏùµÏùÄ 55.2% Í∞êÏÜåÌñàÎã§.",
                        "title": "ÏÇºÏÑ±Ï†ÑÏûê 2025ÎÖÑ 2Î∂ÑÍ∏∞ Ïã§Ï†ÅÎ∞úÌëú Ïª®ÌçºÎü∞Ïä§ÏΩú Ï†ÑÎ¨∏"
                    },
                    {
                        "id": 2,
                        "published_date": "2025-07-07",
                        "source": "Îâ¥Ïä§1",
                        "summary": "ÏÇºÏÑ±Ï†ÑÏûê Ï£ºÍ∞ÄÎäî 2Î∂ÑÍ∏∞ Ïã§Ï†Å Î∞úÌëúÎ•º ÏïûÎëêÍ≥† 1.42% ÌïòÎùΩÌñàÎã§. Ìà¨ÏûêÏûêÎì§ÏùÄ Ïã§Ï†ÅÏóê ÎåÄÌïú Î∂àÌôïÏã§ÏÑ±ÏúºÎ°ú Îß§ÎèÑÏÑ∏Î•º Î≥¥ÏòÄÎã§.",
                        "title": "ÏÇºÏÑ±Ï†ÑÏûê, 2Î∂ÑÍ∏∞ Ïã§Ï†Å Î∞úÌëú ÏïûÎëêÍ≥† 1%ÎåÄ ÌïòÎùΩ[Ìï´Ï¢ÖÎ™©]"
                    },
                    {
                        "id": 3,
                        "published_date": "2025-07-10",
                        "source": "Ï§åÏù∏Î≤†Ïä§Ìä∏",
                        "summary": "ÏÇºÏÑ±Ï†ÑÏûê Ï£ºÍ∞ÄÎäî Ïï†ÌîåÍ≥ºÏùò Ïπ© ÏàòÏ£º ÏÜåÏãùÏúºÎ°ú 1.84% ÏÉÅÏäπÌñàÎã§. 2Î∂ÑÍ∏∞ Ïã§Ï†Å Í∞úÏÑ† Í∏∞ÎåÄÍ∞êÏù¥ Ìà¨Ïûê Ïã¨Î¶¨Ïóê Í∏çÏ†ïÏ†ÅÏúºÎ°ú ÏûëÏö©ÌñàÎã§.",
                        "title": "ÏÇºÏÑ±Ï†ÑÏûê, Ïï†ÌîåÍ≥ºÏùò Ïπ© ÏàòÏ£º ÏÜåÏãùÏóê 1.84% ÏÉÅÏäπ"
                    }
                ],
                "has_news": true,
                "summary_stats": {
                    "negative_news": 1,
                    "neutral_news": 1,
                    "positive_news": 1
                },
                "total_articles": 3
            },
            "yearly_trends": {
                "net_profit": [26407832000000, 39907450000000, 55654077000000, 15487100000000],
                "operating_profit": [35993876000000, 51633856000000, 43376630000000, 6566976000000],
                "revenue": [236806988000000, 279604799000000, 302231360000000, 258935494000000],
                "years": ["2020", "2021", "2022", "2023"]
            }
        };

        // üîç URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú Í∏∞ÏóÖÏΩîÎìúÏôÄ Ïó∞ÎèÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        function getCorpCodeFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            let corpCode = urlParams.get('corpCode') || urlParams.get('corp_code');
            
            // URLÏóê ÏóÜÏúºÎ©¥ localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
            if (!corpCode) {
                try {
                    const savedCompany = localStorage.getItem('selectedCompany');
                    if (savedCompany) {
                        const companyData = JSON.parse(savedCompany);
                        corpCode = companyData.corp_code;
                        console.log('localStorageÏóêÏÑú Í∏∞ÏóÖÏΩîÎìú Í∞ÄÏ†∏Ïò¥:', corpCode);
                    }
                } catch (e) {
                    console.error('localStorage ÏùΩÍ∏∞ Ïã§Ìå®:', e);
                }
            }
            
            return corpCode;
        }

        function getStartYearFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            let startYear = urlParams.get('startYear') || '2020';
            
            // URLÏóê ÏóÜÏúºÎ©¥ localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
            if (startYear === '2020') {
                try {
                    const savedCompany = localStorage.getItem('selectedCompany');
                    if (savedCompany) {
                        const companyData = JSON.parse(savedCompany);
                        startYear = companyData.start_year || '2020';
                        console.log('localStorageÏóêÏÑú ÏãúÏûëÏó∞ÎèÑ Í∞ÄÏ†∏Ïò¥:', startYear);
                    }
                } catch (e) {
                    console.error('localStorage ÏùΩÍ∏∞ Ïã§Ìå®:', e);
                }
            }
            
            return startYear;
        }

        function getEndYearFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            let endYear = urlParams.get('endYear') || '2025';
            
            // URLÏóê ÏóÜÏúºÎ©¥ localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
            if (endYear === '2025') {
                try {
                    const savedCompany = localStorage.getItem('selectedCompany');
                    if (savedCompany) {
                        const companyData = JSON.parse(savedCompany);
                        endYear = companyData.end_year || '2025';
                        console.log('localStorageÏóêÏÑú Ï¢ÖÎ£åÏó∞ÎèÑ Í∞ÄÏ†∏Ïò¥:', endYear);
                    }
                } catch (e) {
                    console.error('localStorage ÏùΩÍ∏∞ Ïã§Ìå®:', e);
                }
            }
            
            return endYear;
        }

        // üöÄ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú URL ÌååÎùºÎØ∏ÌÑ∞ Í∏∞Î∞ò Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        window.addEventListener('load', function() {
            try {
                console.log('=== ÌéòÏù¥ÏßÄ Î°úÎìú ÏãúÏûë ===');
                console.log('ÌòÑÏû¨ URL:', window.location.href);
                console.log('URL ÌååÎùºÎØ∏ÌÑ∞:', window.location.search);

                const corpCodeFromURL = getCorpCodeFromURL();
                console.log('Ï∂îÏ∂úÎêú Í∏∞ÏóÖÏΩîÎìú:', corpCodeFromURL);

                            if (corpCodeFromURL) {
                const startYear = getStartYearFromURL();
                const endYear = getEndYearFromURL();
                
                console.log(`URLÏóêÏÑú Í∏∞ÏóÖÏΩîÎìú Î∞úÍ≤¨: ${corpCodeFromURL}`);
                console.log(`Î∂ÑÏÑù Ïó∞ÎèÑ: ${startYear}ÎÖÑ ~ ${endYear}ÎÖÑ`);
                console.log('displayDashboard Ìï®Ïàò Ìò∏Ï∂ú ÏãúÏûë...');

                // Ïã§Ï†ú API Ìò∏Ï∂ú
                displayDashboard(corpCodeFromURL, startYear, endYear).catch(error => {
                    console.error('displayDashboard Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
                    showError(`ÎåÄÏãúÎ≥¥Îìú Î°úÎìú Ïã§Ìå®: ${error.message}`);
                });
            } else {
                console.log('Í∏∞ÏóÖÏΩîÎìúÍ∞Ä Ï†úÍ≥µÎêòÏßÄ ÏïäÏùå - ÎåÄÍ∏∞ ÏÉÅÌÉú');
                showWaitingState();
            }
            } catch (error) {
                console.error('ÌéòÏù¥ÏßÄ Î°úÎìú Ï§ë Ïò§Î•ò:', error);
                showError(`ÌéòÏù¥ÏßÄ Î°úÎìú Ïã§Ìå®: ${error.message}`);
            }
        });

        // Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨ Ï∂îÍ∞Ä
        window.addEventListener('error', function(event) {
            console.error('JavaScript ÏóêÎü¨:', event.error);
            console.error('ÏóêÎü¨ ÏúÑÏπò:', event.filename, ':', event.lineno);
        });

        window.addEventListener('unhandledrejection', function(event) {
            console.error('Promise ÏóêÎü¨:', event.reason);
        });

        // üìã ÎåÄÍ∏∞ ÏÉÅÌÉú ÌëúÏãú Ìï®Ïàò
        function showWaitingState() {
            document.getElementById('companyName').textContent = 'üè¢ Í∏∞ÏóÖ Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú';
            document.getElementById('analysisPeriod').textContent = 'URLÏóê ?corpCode=Í∏∞ÏóÖÏΩîÎìú ÌååÎùºÎØ∏ÌÑ∞Î•º Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî';

            // Îâ¥Ïä§ ÏòÅÏó≠Ïóê ÎåÄÍ∏∞ Î©îÏãúÏßÄ ÌëúÏãú
            const newsArticles = document.getElementById('newsArticles');
            if (newsArticles) {
                newsArticles.innerHTML = `
                    <div class="news-item">
                        <div class="news-title">üìä Í∏∞ÏóÖ Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Îã§Î¶¨Îäî Ï§ë...</div>
                        <div class="news-summary">
                            URLÏóê ?corpCode=00126380 (ÏÇºÏÑ±Ï†ÑÏûê) ÌòïÌÉúÎ°ú Í∏∞ÏóÖÏΩîÎìúÎ•º Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.<br>
                            ÏòàÏãú: /chatBotDash?corpCode=00126380
                        </div>
                    </div>
                `;
            }

            hideLoading();
            document.getElementById('dashboard').style.display = 'block';
        }

        // üåü ÎîîÎ≤ÑÍπÖÏö© Ìó¨Ìçº Ìï®ÏàòÎì§ (Í∞úÎ∞ú Ï§ë ÏΩòÏÜîÏóêÏÑú ÌÖåÏä§Ìä∏ Í∞ÄÎä•)
        window.testDashboard = function(corpCode = '00126380') {
            console.log(`ÌÖåÏä§Ìä∏: ${corpCode} ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú`);
            const currentYear = new Date().getFullYear().toString();
            displayDashboard(corpCode, '2020', currentYear);
        };

        // Í≥†Í∏â Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        async function loadAdvancedCharts(corpCode, year) {
            try {
                console.log('Í≥†Í∏â Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
                
                const response = await fetch(`${API_BASE_URL}/api/advanced-charts/${corpCode}?year=${year}`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const chartData = await response.json();
                console.log('Í≥†Í∏â Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞:', chartData);
                
                // Í≥†Í∏â Ï∞®Ìä∏ ÏÉùÏÑ± (Ïä§ÌååÏù¥Îçî Ï∞®Ìä∏ÏôÄ ÌûàÌä∏ÎßµÎßå)
                createSpiderChart(chartData.spider_chart);
                createHeatmapChart(chartData.heatmap_chart);
                
                // ÌÉ≠ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
                setupTabListeners();
                
            } catch (error) {
                console.error('Í≥†Í∏â Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
            }
        }

        // ÌÉ≠ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        function setupTabListeners() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanes = document.querySelectorAll('.tab-pane');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const targetTab = button.getAttribute('data-tab');
                    
                    // ÌôúÏÑ± ÌÉ≠ Î≤ÑÌäº Î≥ÄÍ≤Ω
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    
                    // ÌôúÏÑ± ÌÉ≠ ÏΩòÌÖêÏ∏† Î≥ÄÍ≤Ω
                    tabPanes.forEach(pane => pane.classList.remove('active'));
                    document.getElementById(`${targetTab}-tab`).classList.add('active');
                });
            });
        }



        // Ïä§ÌååÏù¥Îçî Ï∞®Ìä∏ ÏÉùÏÑ±
        function createSpiderChart(data) {
            if (!data) {
                console.warn('Ïä§ÌååÏù¥Îçî Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
                return;
            }
            
            if (data.error || !data.dimensions || data.dimensions.length === 0) {
                console.warn('Ïä§ÌååÏù¥Îçî Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ïò§Î•ò:', data?.error || 'Ï∞®Ïõê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
                // Ïä§ÌååÏù¥Îçî Ï∞®Ìä∏ ÏòÅÏó≠Ïóê Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
                const spiderTab = document.getElementById('spider-tab');
                if (spiderTab) {
                    spiderTab.innerHTML = `
                        <div class="chart-container">
                            <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: rgba(255, 255, 255, 0.7);">
                                <div style="text-align: center;">
                                    <div style="font-size: 3rem; margin-bottom: 10px;">üï∑Ô∏è</div>
                                    <div style="font-size: 1.1rem; margin-bottom: 5px;">Ï¢ÖÌï© Ïû¨Î¨¥ ÌèâÍ∞Ä Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</div>
                                    <div style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.5);">
                                        ${data?.error || 'Ïû¨Î¨¥ÎπÑÏú® Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }
                return;
            }
            
            const ctx = document.getElementById('spiderChart').getContext('2d');
            
            if (spiderChart) {
                spiderChart.destroy();
            }
            
            const dimensions = data.dimensions || [];
            const labels = dimensions.map(d => d.name);
            const companyData = dimensions.map(d => d.company);

            
            spiderChart = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Ïû¨Î¨¥ ÏßÄÌëú',
                            data: companyData,
                            backgroundColor: 'rgba(0, 212, 255, 0.2)',
                            borderColor: '#00d4ff',
                            borderWidth: 2,
                            pointBackgroundColor: '#00d4ff',
                            pointBorderColor: '#ffffff',
                            pointBorderWidth: 2
                        }


                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: data.title || 'Ï¢ÖÌï© Ïû¨Î¨¥ ÌèâÍ∞Ä',
                            color: 'rgba(255, 255, 255, 0.9)',
                            font: { size: 16, weight: 'bold' }
                        },
                        legend: {
                            labels: { color: 'rgba(255, 255, 255, 0.8)' }
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.8)',
                                stepSize: 20
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' },
                            pointLabels: { color: 'rgba(255, 255, 255, 0.8)' }
                        }
                    }
                }
            });
        }

        // ÌûàÌä∏Îßµ Ï∞®Ìä∏ ÏÉùÏÑ±
        function createHeatmapChart(data) {
            if (!data) {
                console.warn('ÌûàÌä∏Îßµ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
                return;
            }
            
            if (data.error || !data.data || data.data.length === 0) {
                console.warn('ÌûàÌä∏Îßµ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ïò§Î•ò:', data?.error || 'Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
                // ÌûàÌä∏Îßµ Ï∞®Ìä∏ ÏòÅÏó≠Ïóê Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
                const heatmapTab = document.getElementById('heatmap-tab');
                if (heatmapTab) {
                    heatmapTab.innerHTML = `
                        <div class="chart-container">
                            <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: rgba(255, 255, 255, 0.7);">
                                <div style="text-align: center;">
                                    <div style="font-size: 3rem; margin-bottom: 10px;">üî•</div>
                                    <div style="font-size: 1.1rem; margin-bottom: 5px;">Ïó∞ÎèÑÎ≥Ñ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</div>
                                    <div style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.5);">
                                        ${data?.error || 'Ïó∞ÎèÑÎ≥Ñ Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }
                return;
            }
            
            const ctx = document.getElementById('heatmapChart').getContext('2d');
            
            if (heatmapChart) {
                heatmapChart.destroy();
            }
            
            const heatmapData = data.data || [];
            const years = [...new Set(heatmapData.map(item => item.x))];
            const indicators = [...new Set(heatmapData.map(item => item.y))];
            
            const datasets = indicators.map(indicator => {
                const indicatorData = heatmapData.filter(item => item.y === indicator);
                const data = years.map(year => {
                    const item = indicatorData.find(d => d.x === year);
                    return item ? item.value : 0;
                });
                
                // ÏßÄÌëúÎ™ÖÏùÑ ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏúºÎ°ú Î≥ÄÍ≤Ω
                let displayLabel = indicator;
                let backgroundColor = '';
                
                if (indicator === 'OPM') {
                    displayLabel = 'ÏòÅÏóÖÏù¥ÏùµÎ•†';
                    backgroundColor = 'rgba(52, 152, 219, 0.8)';  // ÌååÎûÄÏÉâ
                } else if (indicator === 'ROE') {
                    displayLabel = 'ROE';
                    backgroundColor = 'rgba(46, 204, 113, 0.8)';  // Ï¥àÎ°ùÏÉâ
                } else if (indicator === 'ROA') {
                    displayLabel = 'ROA';
                    backgroundColor = 'rgba(155, 89, 182, 0.8)';  // Î≥¥ÎùºÏÉâ
                } else if (indicator === 'Î∂ÄÏ±ÑÎπÑÏú®') {
                    displayLabel = 'Î∂ÄÏ±ÑÎπÑÏú®';
                    backgroundColor = 'rgba(230, 126, 34, 0.8)';  // Ï£ºÌô©ÏÉâ
                } else if (indicator === 'Ïú†ÎèôÎπÑÏú®') {
                    displayLabel = 'Ïú†ÎèôÎπÑÏú®';
                    backgroundColor = 'rgba(231, 76, 60, 0.8)';  // Îπ®Í∞ÑÏÉâ
                } else {
                    backgroundColor = 'rgba(149, 165, 166, 0.8)';  // ÌöåÏÉâ (Í∏∞Î≥∏Í∞í)
                }
                
                return {
                    label: displayLabel,
                    data: data,
                    backgroundColor: backgroundColor,
                    borderColor: '#ffffff',
                    borderWidth: 1
                };
            });
            
            heatmapChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: years,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: data.title || 'Ïó∞ÎèÑÎ≥Ñ Ïû¨Î¨¥ ÏßÄÌëú ÎπÑÍµê',
                            color: 'rgba(255, 255, 255, 0.9)',
                            font: { size: 16, weight: 'bold' }
                        },
                        legend: {
                            labels: { color: 'rgba(255, 255, 255, 0.8)' }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { color: 'rgba(255, 255, 255, 0.8)' },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        },
                        x: {
                            ticks: { color: 'rgba(255, 255, 255, 0.8)' },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    }
                }
            });
        }

        window.testChat = function(message = 'Ïù¥ ÌöåÏÇ¨ Ïñ¥Îñ§Í∞ÄÏöî?') {
            console.log(`ÌÖåÏä§Ìä∏ Ï±ÑÌåÖ: ${message}`);
            addMessage('user', message);
            sendChatMessage(message).then(response => {
                addMessage('assistant', response);
            }).catch(error => {
                addMessage('assistant', `ÌÖåÏä§Ìä∏ Ïã§Ìå®: ${error.message}`);
            });
        };

        // üåê Ïô∏Î∂Ä Ïó∞ÎèôÏö© Ìï®ÏàòÎì§ (POST Î∞©Ïãù ÏßÄÏõê)

        // 1. Í∏∞ÏóÖ ÏÑ†ÌÉù Ïãú Ìò∏Ï∂úÎêòÎäî Ìï®Ïàò (ÌåùÏóÖÏóêÏÑú ÏÇ¨Ïö©) - Ìï®ÏàòÎ™Ö Î≥ÄÍ≤ΩÏúºÎ°ú Ï∂©Îèå Î∞©ÏßÄ
        window.onCompanySelectedFromDashboard = function(corpCode) {
            console.log(`üè¢ ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú Í∏∞ÏóÖ ÏÑ†ÌÉùÎê®: ${corpCode}`);
            const currentYear = new Date().getFullYear().toString();
            displayDashboard(corpCode, '2020', currentYear);
        };

        // 2. Í∏∞ÏóÖ Î∂ÑÏÑù ÏãúÏûë Ìï®Ïàò (ÏßÄÏú§Îãò ÏΩîÎìúÏôÄ Ìò∏Ìôò)
        window.startChatWithCompany = async function(corpCode) {
            console.log(`üöÄ Í∏∞ÏóÖ Î∂ÑÏÑù ÏãúÏûë: ${corpCode}`);

            try {
                const currentYear = new Date().getFullYear().toString();
                await displayDashboard(corpCode, '2020', currentYear);

                if (currentDashboardData) {
                    console.log('‚úÖ Í∏∞ÏóÖ Î∂ÑÏÑù Ï§ÄÎπÑ ÏôÑÎ£å');
                    return {
                        status: 'success',
                        company_data: currentDashboardData,
                        message: `${currentDashboardData.company_info.corp_name} Í∏∞ÏóÖ Î∂ÑÏÑù Ï§ÄÎπÑ ÏôÑÎ£å`
                    };
                } else {
                    throw new Error('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                }
            } catch (error) {
                console.error('‚ùå Í∏∞ÏóÖ Î∂ÑÏÑù ÏãúÏûë Ïã§Ìå®:', error);
                return {
                    status: 'error',
                    message: error.message
                };
            }
        };

        // 3. ÌòÑÏû¨ Î°úÎìúÎêú Í∏∞ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
        window.getCurrentCompanyData = function() {
            return currentDashboardData;
        };

        console.log('üîß Î∞∞Ìè¨ ÏÑúÎ≤Ñ Ïó∞Îèô ÎåÄÏãúÎ≥¥Îìú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        console.log('üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìï®ÏàòÎì§:');
        console.log('  üîπ ÎÇ¥Î∂Ä Ìï®Ïàò:');
        console.log('    - displayDashboard(corpCode, startYear, endYear): ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú');
        console.log('    - testDashboard(corpCode): ÌÖåÏä§Ìä∏Ïö© ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú');
        console.log('    - testChat(message): ÌÖåÏä§Ìä∏Ïö© Ï±ÑÌåÖ');
        console.log('  üåê Ïô∏Î∂Ä Ïó∞Îèô Ìï®Ïàò:');
        console.log('    - window.onCompanySelected(corpCode): ÌåùÏóÖÏóêÏÑú Í∏∞ÏóÖ ÏÑ†ÌÉù');
        console.log('    - window.startChatWithCompany(corpCode): Í∏∞ÏóÖ Î∂ÑÏÑù ÏãúÏûë');
        console.log('    - window.getCurrentCompanyData(): ÌòÑÏû¨ Í∏∞ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò');
        console.log(`üåê Î∞∞Ìè¨Îêú ÏÑúÎ≤Ñ: ${API_BASE_URL}`);

        const currentCorpCode = getCorpCodeFromURL();
        if (currentCorpCode) {
            console.log(`üè¢ ÌòÑÏû¨ Í∏∞ÏóÖÏΩîÎìú: ${currentCorpCode}`);
        } else {
            console.log('‚ö†Ô∏è Í∏∞ÏóÖÏΩîÎìúÍ∞Ä Ï†úÍ≥µÎêòÏßÄ ÏïäÏùå - ÎåÄÍ∏∞ ÏÉÅÌÉú');
        }


    </script>
</body>
</html>